---
import { parseMetaFromRaw } from "@/scripts/mixin-meta";
import { Icon } from "astro-icon/components";

interface Props {
    text: string;
}

type SupportedIconStyle = "inline" | "title" | "non-hover";

const metas = parseMetaFromRaw<SupportedIconStyle>(Astro.props.text);
---

<!-- <span data-has-icon="true"> -->{
    metas.map(meta => {
        if (meta.type === "text") {
            return <span>{meta.literal}</span>;
        } else if (meta.type === "icon") {
            return (
                <span data-icon-style={(meta.style ?? ["inline"]).join(" ")}>
                    <span>
                        <Icon name={meta.id} />
                    </span>
                </span>
            );
        } else {
            return null;
        }
    })
}
<!-- </span> -->

<style lang="scss">
    $icon-size-title: 1.7em;
    $icon-size-inline: 1.1rem;

    [data-icon-style~="inline"] + span,
    span + [data-icon-style~="inline"] {
        margin-left: calc($icon-size-inline * 0.4) !important;
    }

    [data-icon-style~="title"] + span,
    span + [data-icon-style~="title"] {
        margin-left: calc($icon-size-title * 0.4) !important;
    }

    [data-icon-style] {
        display: inline-block;
        user-select: none;
        & > span {
            display: inline-flex;
            vertical-align: middle;
            padding-bottom: 0.19rem;
            box-sizing: border-box;
        }
    }

    [data-icon-style~="inline"] > span > svg {
        height: $icon-size-inline;
        width: max-content;
    }
    [data-icon-style~="title"] > span > svg {
        height: $icon-size-title;
        width: max-content;
    }
    [data-icon-style~="non-hover"] {
        color: var(--font-color);
        &:hover {
            color: var(--font-color);
        }
    }
</style>
