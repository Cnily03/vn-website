---
import type { IconId, IconHTML, NavIconItem } from "@/types/nav";
import { Icon } from "astro-icon/components";
import Reactify from "@/components/Reactify";

export interface Props {
    icon: IconId | IconHTML | React.ReactElement; // icon-id or node
    title?: string;
    link?: string;
    target?: "_blank" | "_self" | "_parent" | "_top";
    active?: boolean;
}

const { active, ...props } = Astro.props;

interface InferResult {
    type: "id" | "html" | "node" | "null";
    data: {
        id?: string;
        html?: IconHTML;
        node?: React.ReactElement;
        null?: null;
    };
}

function inferIcon(icon: IconId | IconHTML | React.ReactElement) {
    if (typeof icon === "string") {
        if (icon.startsWith(":")) {
            return {
                type: "id",
                data: {
                    id: icon.slice(1, -1)
                }
            };
        } else if (icon.startsWith("<") && icon.endsWith(">")) {
            return {
                type: "html",
                data: {
                    html: icon.slice(1, -1)
                }
            };
        } else {
            return {
                type: "null",
                data: {
                    null: null
                }
            };
        }
    } else {
        return {
            type: "node",
            data: {
                node: icon
            }
        };
    }
}

const infer = inferIcon(props.icon);
---

<li class:list={[{ active: active }]}>
    <a href={props.link} target={props.target} title={props.title || undefined}>
        {
            infer.type === "id" ? (
                <Icon name={infer.data[infer.type]!} />
            ) : infer.type === "html" ? (
                <Fragment set:html={infer.data[infer.type]!} />
            ) : infer.type === "node" ? (
                <Reactify data-icon el={infer.data[infer.type]!} />
            ) : null
        }
    </a>
</li>

<style lang="scss">
    [data-icon] {
        height: 100%;
        width: max-content;
    }
</style>
