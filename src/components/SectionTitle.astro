---
import type { HTMLAttributes } from "astro/types";
import Anchor from "@/components/helpers/AnchorPadNavTop.astro";

interface Props extends HTMLAttributes<"div"> {
    text?: string;
    withIcon?: boolean;
    anchor?: string;
    anchorPrefix?: string;
}

const { text, withIcon = false, anchor, anchorPrefix = "", ...rest } = Astro.props;

let _anchor: string;
if (anchor) _anchor = anchorPrefix + anchor;
else if (text) _anchor = anchorPrefix + text.toLowerCase().replace(/\s/g, "-");
else _anchor = "";
let anchorWithHash = _anchor && "#" + _anchor;
---

<div {...rest} class:list={["section-title", rest.class, rest["class:list"]]}>
    <Anchor id={_anchor} />
    <a href={anchorWithHash} target="_self">
        {
            text ? (
                <span data-literal set:text={text} data-with-icon={withIcon.toString()} />
            ) : (
                <span data-literal data-with-icon={withIcon.toString()}>
                    <slot />
                </span>
            )
        }
    </a>
</div>

<style lang="scss">
    @import "@/styles/defines.scss";
    .section-title {
        $font-size: 1.6em;
        font-size: $font-size;
        font-weight: bold;
        margin: 2rem 0 1rem;
        & > a {
            display: inline-block;
            cursor: pointer;
            transition:
                color 0.25s,
                transform 0.25s ease-out;
            color: var(--font-color);
            transform: translate(0);
            &:hover {
                color: var(--font-color-2);
                transform: translate(-0.25rem, 0);
            }
        }
        [data-literal] {
            $icon-size: $font-size * 0.25;
            $border-width: 3px;
            $icon-width: calc(#{$icon-size * 2} + #{$border-width * 2});
            display: flex;
            align-items: center;
            margin: 0 0 0 calc(-1 * #{$icon-size});
            &[data-with-icon="true"]::before {
                content: "";
                display: block;
                position: absolute;
                height: $icon-size;
                width: $icon-size;
                transform: translate(calc(-1 * $icon-width), 0);
                background-color: transparent;
                border-radius: 50%;
                border: $border-width solid currentColor;
                transition: border 0.25s;
            }
            &[data-with-icon="true"] {
                margin: 0 0 0 1rem;
            }
        }
    }
</style>
